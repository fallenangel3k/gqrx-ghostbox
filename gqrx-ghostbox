#!/usr/bin/env perl

################################################################################
# gqrx-ghostbox -  Utility for EVP/ghost box style radio scanning with GQRX
# Copyright (c) 2021, Douglas Haber, brecolbrecol, fallenangel3k
# All rights reserved
################################################################################
# For more information about this program and its usage, or to find the
# most recevent version, please go to:
#    http://github.com/DougHaber/gqrx-ghostbox
#
################################################################################
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * The names names of the authors may not be used to endorse or
#       promote products derived from this software without specific
#       prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS
# CONTRIBUTERS ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS
# CONTRIBUTERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
################################################################################

use warnings;
use strict;

use GQRX::Remote;

{
    # This module has been inlined to keep packaging simple.  If the application
    # grows, it should be broken apart.
    package Ghostbox;

    use Time::HiRes qw(usleep);
    use Getopt::Long qw(:config no_ignore_case);
	
    use LWP::Simple;
    use Net::Random;
    use Crypt::Random qw(makerandom_itv); 

    use warnings;
    use strict;

    ################################################################################
    # Interface
    ################################################################################

    sub new {
    	my $class = shift();
    	my $self = {
	    remote    => undef,  # GQRX::Remote object
	    options   => undef,  # Runtime options
	    frequency => undef   # The current scanning frequency
	};
	bless ($self, $class);
	$self->parse_command_line_options();
	return ($self);
    }


    sub start {
    my ($self) = @_;

	print "\n\n\n######### PARA-GERMANIA #########\n";		
	print "# Welcome to the GQRX-Ghostbox! #\n"; 
	print "# Modified by Michael & Marcus. #\n";
	print "#         January 2021          #\n";
	print "# CAUTION: Use at own risk!     #\n";
	print "#################################\n\n\n";
	
	$self->connect_to_gqrx();

	# Setup a random starting frequency within the range
	$self->{frequency} = int(rand($self->{options}->{max_frequency} - $self->{options}->{min_frequency}) +
	$self->{options}->{min_frequency});

	# Set the default demodulator mode and squelch
	$self->{remote}->set_demodulator_mode($self->{options}->{demodulator_mode});
	$self->{remote}->set_squelch_threshold(($self->{options}->{mysquelch}));
	print "MODE: $self->{options}->{scanning_mode}\n";
	print "DEMODULATOR SET: $self->{options}->{demodulator_mode}\n";
	print "SQUELCH SET: $self->{options}->{mysquelch}\n\n";

	print "STARTING THE GHOSTBOX NOW!\n\n";

    while (1) {
    $self->next_frequency();

    if (! $self->{options}->{quiet_mode}) {
    print "\nSETTING FREQUENCY: $self->{frequency}\n";
    }

	# Michael & Marcus MOD 
        if ($self->{options}->{randsleep}) {
		my $range = $self->{options}->{randsleep};
		my $random_number = int(rand($range));
    		my $rnhum = $random_number / 1000000;
		print "RANDOM SLEEPTIME: $rnhum sec.\n";
		usleep($random_number);
        }

	my $ghost = rand() * 100;
	if ($ghost < ($self->{options}->{ghostchance})) {
		my $ghrange = $self->{options}->{ghostmode};
		my $ghrandom_number = int(rand($ghrange));
    		my $ghrnhum = $ghrandom_number / 1000000;
		print "RANDOM GHOST-TIME: $ghrnhum SEC.\n";
		usleep($ghrandom_number);
	}
    
	my $stdsleep = ($self->{options}->{sleep_time}) / 1000000;
	print "SLEEPTIME: $stdsleep SEC.\n";	
        usleep($self->{options}->{sleep_time});
    }
	
    }


    ################################################################################
    # Networking
    ################################################################################

    sub connect_to_gqrx {
	my ($self) = @_;
        $self->{remote} = GQRX::Remote->new();
        if (! $self->{remote}->connect(host => $self->{options}->{gqrx_host},
                                       port => $self->{options}->{gqrx_port})) {
            die "ERROR: Failed to establish connection to Gqrx " .
                "at $self->{options}->{gqrx_host}:$self->{options}->{gqrx_port}\n";
        }
    }


   ################################################################################
   # Scanning
   ################################################################################


sub set_frequency
{
	my $self = shift;
	my $new_freq = shift;
	$self->{frequency} = $new_freq;
	if (! $self->{remote}->set_frequency($new_freq)) {
		die "ERROR: set_frequency() failed: " . $self->{remote}->error() . "\n";
	}
}


sub next_frequency {
	my ($self) = @_;
	my $options = $self->{options};
	my $scanning_mode = $options->{scanning_mode};

	if ($scanning_mode eq 'RANDOM') {
		$self->set_frequency_random();
	}
	elsif ($scanning_mode eq 'RANDOM2') {
		$self->set_frequency_random2();
	}
	elsif ($scanning_mode eq 'QUANTUMRANDOM1') {
		$self->set_frequency_quantumrandom1();
	}
	elsif ($scanning_mode eq 'QUANTUMRANDOM2') {
		$self->set_frequency_quantumrandom2();
	}
	elsif ($scanning_mode eq 'QUANTUMRANDOM3') {
		$self->set_frequency_quantumrandom3();
	}
	elsif ($scanning_mode eq 'BACKWARD') {
		$self->frequency_step_backward();
	}
	else { # Default is 
		$self->frequency_step_forward();
	}
}

sub generate_new_frequency
{
	my ($self) = @_;
	my $options = $self->{options};
}


#### Marcus & Michael MOD
sub set_frequency_quantumrandom3
{
	my $self = shift;
        my $options = $self->{options};
	my $url = "http://qrng.ethz.ch/api/randint?size=1&min=$options->{min_frequency}&max=$options->{max_frequency}";
	my $content = get($url);  
	my @mycontent = split /[{["result": }\]]/, $content;  # original response from JSON API was for e.g. --> {"result": [96245783]}
	my $myquantumfreq = $mycontent[12];
	my $myquantumfreqprint = $myquantumfreq / 1000 / 1000;
	print "QUANTUMFREQUENCY: $myquantumfreqprint MHz";
	#  $self->{frequency} = int(rand($options->{max_frequency} - $options->{min_frequency}) + $options->{min_frequency});
	#  $self->{frequency} = $myquantumfreq;
	$self->set_frequency($myquantumfreq);
}

sub set_frequency_quantumrandom2
{
	my $self = shift;
        my $options = $self->{options};
	my $rand = Net::Random->new( 
	src => 'qrng.anu.edu.au',   # sources: qrng.anu.edu.au OR random.org
	#src => 'random.org',   # sources: qrng.anu.edu.au OR random.org
	min => $options->{min_frequency},
	max => $options->{max_frequency}
	);
	my $number = $rand->get();  # get numbers
	my $myquantumfreqprint = $number / 1000 / 1000;
	print "QUANTUMFREQUENCY: $myquantumfreqprint MHz";
	#  $self->{frequency} = $number;
	$self->set_frequency($number);
}
	
sub set_frequency_quantumrandom1
{
	my $self = shift;
        my $options = $self->{options};
	my $rand = Net::Random->new( 
	#src => 'qrng.anu.edu.au',   # sources: qrng.anu.edu.au OR random.org
	src => 'random.org',   # sources: qrng.anu.edu.au OR random.org
	min => $options->{min_frequency},
	max => $options->{max_frequency}
	);
	my $number = $rand->get();  # get numbers
	my $myquantumfreqprint = $number / 1000 / 1000;
	print "QUANTUMFREQUENCY: $myquantumfreqprint MHz";
	#  $self->{frequency} = $number;
	$self->set_frequency($number);
}

sub set_frequency_random2
{
	my $self = shift;
        my $options = $self->{options};
	my $r = makerandom_itv ( Lower => ($options->{min_frequency}), Upper => ($options->{max_frequency}) );
	#    $self->{frequency} = int(rand($options->{max_frequency} - $options->{min_frequency}) + $options->{min_frequency});
	#    $self->{frequency} = $r;
	$self->set_frequency($r);
}


sub set_frequency_random
{
	my $self = shift;
        my $options = $self->{options};
	my $frequency_width = $options->{max_frequency} - $options->{min_frequency};
	my $random_freq = int(rand($frequency_width)) + $options->{min_frequency};
	$self->set_frequency($random_freq);
}

sub frequency_step_backward
{
	my $self = shift;
        my $options = $self->{options};
	my ($scanning_step, $min_frequency, $max_frequency, $bounce, $frequency)  = ($options->{scanning_step}, $options->{min_frequency}, $options->{max_frequency}, $options->{bounce}, $self->{frequency});  
	my $new_frequency = $frequency - $scanning_step;
	if ($new_frequency < $min_frequency) {
		if ($bounce) {
			$options->{scanning_mode} = 'FORWARD';
			$self->next_frequency();
		}
		else {
			$new_frequency = $new_frequency + $max_frequency - $min_frequency;
		}
	}
	$self->set_frequency( $new_frequency );
}


sub frequency_step_forward
{
	my $self = shift;
        my $options = $self->{options};
	my ($scanning_step, $min_frequency, $max_frequency, $bounce, $frequency)  = ($options->{scanning_step}, $options->{min_frequency}, $options->{max_frequency}, $options->{bounce}, $self->{frequency});  
	my $new_frequency = $frequency + $scanning_step;
	if ($new_frequency > $max_frequency) {
		if ($bounce) {
			$options->{scanning_mode} = 'BACKWARD';
			$self->next_frequency();
		}
		else {
			$new_frequency = $new_frequency - $max_frequency + $min_frequency ;
		}
	}

	$self->set_frequency( $new_frequency );
}



    ################################################################################
    # Command line parsing
    ################################################################################

    sub show_usage {
	# Show the usage help message
	# This accepts an optional $error_message string.  If defined,
	# this is printed before the help as an error message and the exit
	# code is 1.  Otherwise, the exit code will be 0.
	my ($self, $error_message) = @_;

	if ($error_message) {
	    print STDERR "ERROR: $error_message\n\n";
	}

	print <<EOF;
Usage: gqrx-ghostbox [OPTIONS]
  GENERAL:
    -h, --help                          Display this detailed help message
    -q, --quiet                         Quiet mode - only output errors

  CONNECTION:
    -H, --host={IP_ADDRESS}             GQRX Host IP (default is 127.0.0.1)
    -P, --port={PORT}                   GQRX Port (default is 7356)
    -h, --help                          Show this help message

  RADIO SETTINGS:
    -d, --demodulator-mode={MODE}       The GQRX demodulator mode to use
                                        (default is 'WFM')
                                        Options: AM, CW, CWL, CWU, FM, LSB, USB,
                                	WFM, WFM_ST, WFM_ST_OIRT

  SCANNING SETTINGS:
    --min, --min-frequency={FREQUENCY}  Minimum frequency to scan in KHz
                                        (default is '87600', FM min)

    --max, --max-frequency={FREQUENCY}  Maximum frequency to scan in KHz
                                        (default is '107700', FM max)
   
    -f, --follow={0|1}			Chance to determine if we want to follow along the scan

    -b, --bounce={0|1}			Option to tell if we want to bounce at the ends of the spectrum

    -m, --scanning-mode={MODE}          Method of scanning
                                        Options: forward, backward, bounce, random, random2
					NEW: quantumrandom1, quantumrandom2, quantumrandom3
                                        (default is 'random')
										
    -s, --scanning-step={STEP_SIZE}     How many KHz to move when scanning
                                        (default is 150)
					This has no effect in "random" mode

    -S, --sleep={TIME}			Time to hold a frequency for each in ms. 
					(default is '13')

    -R, --randsleep={TIME}		NEW: Maximum additional random sleep time in ms 
					(default is '0')
					
    -G, --ghostmode={TIME}		NEW: Maximum additional random sleep time in ms which is enabled 
					by ghost/randomly by xx% as per -X/--ghostchance
					(default is '0')
					
    -X, --ghostchance={PERCENT}		NEW: Percent above which GHOST/random is enabled
					(default is '0')
					
    -n, --squelch={mysquelch}		NEW: Treshold-Level for Squelch (more turns on sooner). 
					(default is '66')
					

EOF

        exit ($error_message ? 1 : 0);
    }


    sub validate_options {
	my ($self) = @_;
	my $options = $self->{options};

	$options->{demodulator_mode} = uc($options->{demodulator_mode});
	$options->{scanning_mode} = uc($options->{scanning_mode});

	if ($options->{gqrx_host} !~ /^(\d{1,3}\.){3}\d{1,3}$/) {
	    $self->show_usage("The host must be set to a valid IPv4 address");
	}
	elsif ($options->{demodulator_mode} !~ /^(AM|CW|CWL|CWU|FM|LSB|USB|WFM|WFM_ST|WFM_ST_OIRT)$/) {
	    $self->show_usage("Unknown demodulator mode");
	}
	elsif ($options->{scanning_mode} !~ /^(FORWARD|BACKWARD|BOUNCE|RANDOM|RANDOM2|QUANTUMRANDOM1|QUANTUMRANDOM2|QUANTUMRANDOM3)$/) {
	    $self->show_usage("Unknown scanning mode");
	}
	elsif ($options->{scanning_step} <= 0) {
	    $self->show_usage("Scanning step must be greater than 0");
	}
	elsif ($options->{min_frequency} <= 0) {
	    $self->show_usage("The minimum frequency must be greater than 0");
	}
	elsif ($options->{max_frequency} <= 0) {
	    $self->show_usage("The maximum frequency must be greater than 0");
	}
	elsif ($options->{min_frequency} >= $options->{max_frequency}) {
	    $self->show_usage("The minimum frequency must be less than the maximum frequency");
	}	
	elsif ($options->{mysquelch} >= 0) {
	    $self->show_usage("Squelch step must be negative value smaller than 0");
	}
	
    }


    sub setup_options {
	my ($self) = @_;
	my $options = $self->{options};

	# Convert the options to the expected value
	$options->{scanning_step} *= 1000;
	$options->{min_frequency} *= 1000;
	$options->{max_frequency} *= 1000;
	$options->{sleep_time} *= 1000;
	$options->{randsleep} *= 1000;
	$options->{ghostmode} *= 1000;

	# If bounce is enabled, pick a starting direction
	if ($options->{scanning_mode} eq 'BOUNCE') {
		$options->{scanning_mode} = rand() > 0.5 ? 'FORWARD' : 'BACKWARD';
		$options->{bounce} = 1;
	}
    }


    sub parse_command_line_options {
	my ($self) = @_;
	my %options = (
	    bounce => 0,                 # Oscillate the scanning mode when true
	    followscan => 0,		 # For use with (quantum)random-modes, chance to do a normal fwd/backwd-scanstep
	    demodulator_mode => 'WFM',   # Options: AM, FM, WFM, WFM_ST, WFM_ST_OIRT, LSB, USB, CW, CWL, CWU
	    gqrx_host => '127.0.0.1',
	    gqrx_port => 7356,
	    help => 0,
	    max_frequency => 107700,     # Maximum frequency to use in KHz
	    min_frequency => 87600,      # Minimum frequency to use in KHz
            quiet_mode => 0,         	 # When true, only output errors
	    scanning_mode => 'random2',  # Options: forward, backward, bounce, random, random2, quantumrandom1, quantumrandom2, quantumrandom3
	    scanning_step => 150,        # The size of each step in KHz for linear scanning
	    sleep_time => 13,            # Number of ms to wait before changing frequency
	    randsleep => 0,              # Max random number of additional ms to wait before changing frequency
            ghostmode => 0,              # Max random number of additional ms to wait before changing frequency trigged by ghost/random
	    ghostchance => 0,            # Ghost/random chance to trigger additional time to wait on same frequency
	    mysquelch => -66		 # Set Squelch to desired level
	    );

	if (! GetOptions(
		  "demodulator-mode|d=s" => \$options{demodulator_mode},
		  "help|h"               => \$options{help},
		  "host|H=s"             => \$options{gqrx_host},
		  "max-frequency|max=f"  => \$options{max_frequency},
		  "min-frequency|min=f"  => \$options{min_frequency},
		  "port|P=s"             => \$options{gqrx_port},
		  "quiet|q"              => \$options{quiet_mode},
		  "bounce|b"		 => \$options{bounce},
		  "follow|f"		 => \$options{followscan},
		  "scanning-mode|m=s"    => \$options{scanning_mode},
		  "scanning-step|s=f"    => \$options{scanning_step},
		  "sleep-time|S=f"       => \$options{sleep_time},
		  "randsleep|R=f"        => \$options{randsleep},
		  "ghostmode|G=f"        => \$options{ghostmode},
		  "ghostchance|X=f"      => \$options{ghostchance},
		  "mysquelch|n=f"	 => \$options{mysquelch}
	    )) {
	    $self->show_usage();
	}
	$self->{options} = \%options;
	if ($options{help}) {
	    $self->show_usage();
	}
	$self->validate_options();
	$self->setup_options();
    }
}


################################################################################

sub main {
    my $ghostbox = new Ghostbox();
    $ghostbox->start();
}


main();
